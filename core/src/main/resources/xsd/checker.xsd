<schema
    elementFormDefault="qualified"
    attributeFormDefault="unqualified"
    xmlns="http://www.w3.org/2001/XMLSchema"
    xmlns:xsd="http://www.w3.org/2001/XMLSchema"
    xmlns:chk="http://www.rackspace.com/repose/wadl/checker"
    xmlns:saxon="http://saxon.sf.net/"
    targetNamespace="http://www.rackspace.com/repose/wadl/checker">

    <!-- The Checker Element -->
    <element name="checker" type="chk:Checker"/>

    <!-- Complex Types -->
    <complexType name="Step">
        <annotation>
            <documentation xmlns:html="http://www.w3.org/1999/xhtml">
                <html:p>
                   Base type for all other steps.
                </html:p>
            </documentation>
        </annotation>
        <attribute name="id" type="xsd:ID" use="required"/>
        <attribute name="type" type="chk:StepType" use="required"/>
        <attribute name="label" type="xsd:string" use="optional"/>
    </complexType>

    <complexType name="Checker">
        <sequence>
            <element name="grammar" type="chk:Grammar" minOccurs="0" maxOccurs="unbounded"/>
            <element name="step" type="chk:Step" minOccurs="0" maxOccurs="unbounded">
                <alternative test="@type eq 'START'" type="chk:StartStep"/>
                <alternative test="@type eq 'URL_FAIL'" type="chk:URLFailStep"/>
                <alternative test="@type eq 'METHOD_FAIL'" type="chk:MethodFailStep"/>
                <alternative test="@type eq 'ACCEPT'" type="chk:AcceptStep"/>
                <alternative test="@type eq 'URL'" type="chk:URLStep"/>
                <alternative test="@type eq 'METHOD'" type="chk:MethodStep"/>
                <alternative test="@type eq 'URLXSD'" type="chk:URLXSDStep"/>
                <alternative test="@type eq 'REQ_TYPE'" type="chk:ReqTypeStep"/>
                <alternative test="@type eq 'REQ_TYPE_FAIL'" type="chk:ReqTypeFailStep"/>
            </element>
        </sequence>
        <assert test="if (count(chk:step[@type='START']) = 1) then true() else false()"
                saxon:message="There should be 1 and only 1 step of type START.">
            <annotation>
                <documentation xmlns:html="http://www.w3.org/1999/xhtml">
                    <html:p>
                        There should be a single START node.
                    </html:p>
                </documentation>
            </annotation>
        </assert>
    </complexType>

    <!-- Connected Steps -->
    <complexType name="ConnectedStep">
        <annotation>
            <documentation xmlns:html="http://www.w3.org/1999/xhtml">
                <html:p>
                    A base step type for all steps that connect to other steps.
                </html:p>
            </documentation>
        </annotation>
        <complexContent>
            <extension base="chk:Step">
                <attribute name="next" type="xsd:IDREFS" use="required"/>
            </extension>
        </complexContent>
    </complexType>

    <complexType name="StartStep">
        <annotation>
            <documentation xmlns:html="http://www.w3.org/1999/xhtml">
                <html:p>
                    A start step, denotes the start of the machine.
                </html:p>
            </documentation>
        </annotation>
        <complexContent>
            <extension base="chk:ConnectedStep"/>
        </complexContent>
    </complexType>

    <complexType name="URLStep">
        <annotation>
            <documentation xmlns:html="http://www.w3.org/1999/xhtml">
                <html:p>
                    A step in the URL path. The match attribute
                    contains a regex that matches the steps section of
                    the path.
                </html:p>
            </documentation>
        </annotation>
        <complexContent>
            <extension base="chk:ConnectedStep">
                <attribute name="match" type="xsd:string" use="required"/>
            </extension>
        </complexContent>
    </complexType>

    <complexType name="URLXSDStep">
        <annotation>
            <documentation xmlns:html="http://www.w3.org/1999/xhtml">
                <html:p>
                    A step in the URL path. The match attribute
                    contains a QName that is used to represent an XSD
                    simple type that validates against the section of
                    the path.
                </html:p>
                <html:p>
                    Note: If possible, should extend to make sure tha
                    the simple type is defined by a referenced schema.
                    We're not there yet.
                </html:p>
            </documentation>
        </annotation>
        <complexContent>
            <extension base="chk:ConnectedStep">
                <attribute name="match" type="xsd:QName" use="required"/>
            </extension>
        </complexContent>
    </complexType>

    <complexType name="MethodStep">
        <annotation>
            <documentation xmlns:html="http://www.w3.org/1999/xhtml">
                <html:p>
                    A step checking the current method.  The match
                    attribute contains a regex that matches against
                    the method name.
                </html:p>
            </documentation>
        </annotation>
        <complexContent>
            <extension base="chk:ConnectedStep">
                <attribute name="match" type="xsd:string" use="required"/>
            </extension>
        </complexContent>
    </complexType>

    <complexType name="ReqTypeStep">
        <annotation>
            <documentation xmlns:html="http://www.w3.org/1999/xhtml">
                <html:p>
                    A step checking the request content type.  The
                    match attribute contains a regex that matches
                    against the content type mimetype.
                </html:p>
            </documentation>
        </annotation>
        <complexContent>
            <extension base="chk:ConnectedStep">
                <attribute name="match" type="xsd:string" use="required"/>
            </extension>
        </complexContent>
    </complexType>

    <!-- End Steps -->
    <complexType name="AcceptStep">
        <annotation>
            <documentation xmlns:html="http://www.w3.org/1999/xhtml">
                <html:p>
                    An accept step, we accept the input.
                </html:p>
            </documentation>
        </annotation>
        <complexContent>
            <extension base="chk:Step"/>
        </complexContent>
    </complexType>

    <complexType name="URLFailStep">
        <annotation>
            <documentation xmlns:html="http://www.w3.org/1999/xhtml">
                <html:p>
                    A URLFail step, this should generate a 404 (Not
                    Found). If the notMatch and notTypes attributes
                    are missing the step always applies.  If the
                    attributes are present, the present attributes
                    must be satisfied in order of the step to apply.
                </html:p>
            </documentation>
        </annotation>
        <complexContent>
            <extension base="chk:Step">
                <attribute name="notMatch" type="xsd:string" use="optional">
                    <annotation>
                        <documentation xmlns:html="http://www.w3.org/1999/xhtml">
                            <html:p>
                                A URLFail step applies only if the
                                current URL segment does
                                <html:strong>not</html:strong>
                                validate against the regex listed in
                                this attribute.
                            </html:p>
                        </documentation>
                    </annotation>
                </attribute>
                <attribute name="notTypes" type="chk:QNameList" use="optional">
                    <annotation>
                        <documentation xmlns:html="http://www.w3.org/1999/xhtml">
                            <html:p>
                                A URLFail step applies if the
                                current URL segment does
                                <html:strong>not</html:strong>
                                validate against any in the list of
                                simple types listed in this attribute.
                            </html:p>
                        </documentation>
                    </annotation>
                </attribute>
            </extension>
        </complexContent>
    </complexType>

    <complexType name="MethodFailStep">
        <annotation>
            <documentation xmlns:html="http://www.w3.org/1999/xhtml">
                <html:p>
                    A MethodFail step, this should generate a 405
                    (Method Not Allowed). If the notMatch attribute is
                    missing the step always applies.  If the attribute
                    is present, it must be satisfied in order of the
                    step to apply.
                </html:p>
            </documentation>
        </annotation>
        <complexContent>
            <extension base="chk:Step">
                <attribute name="notMatch" type="xsd:string" use="optional">
                    <annotation>
                        <documentation xmlns:html="http://www.w3.org/1999/xhtml">
                            <html:p>
                                A MethodFail step applies if the
                                current method does
                                <html:strong>not</html:strong>
                                validate against the regex listed in
                                this attribute.
                            </html:p>
                        </documentation>
                    </annotation>
                </attribute>
            </extension>
        </complexContent>
    </complexType>

    <complexType name="ReqTypeFailStep">
        <annotation>
            <documentation xmlns:html="http://www.w3.org/1999/xhtml">
                <html:p>
                    A MethodFail step, this should generate a 415
                    (Unsupported Media Type). The notMatch attribute
                    must be satisfied in order for the step to apply.
                </html:p>
            </documentation>
        </annotation>
        <complexContent>
            <extension base="chk:Step">
                <attribute name="notMatch" type="xsd:string" use="required">
                    <annotation>
                        <documentation xmlns:html="http://www.w3.org/1999/xhtml">
                            <html:p>
                                A ReqTypeFailStep applies if the
                                current request content type does
                                <html:strong>not</html:strong>
                                validate against the regex listed in
                                this attribute.
                            </html:p>
                        </documentation>
                    </annotation>
                </attribute>
            </extension>
        </complexContent>
    </complexType>

    <!-- Grammar Def -->
    <complexType name="Grammar">
        <annotation>
            <documentation xmlns:html="http://www.w3.org/1999/xhtml">
                <html:p>
                    Describes a grammar needed for validation by the
                    checker.
                </html:p>
            </documentation>
        </annotation>
        <sequence>
            <!--
                 Pretty lax check for now, not really any schema type
                 we use the assertion to restrict this to
                 xsd:schema only.

                 TODO, bring in XSD 1.1 schema and actually validate.
            -->
            <any minOccurs="0" maxOccurs="1" namespace="http://www.w3.org/2001/XMLSchema" processContents="lax"/>
        </sequence>
        <attribute name="type" type="chk:GrammarType" use="optional" default="W3C_XML"/>
        <attribute name="ns" type="xsd:string" use="optional"/>
        <attribute name="href" type="xsd:anyURI" use="optional"/>
        <assert test="if (xsd:*) then xsd:schema else true()"
                saxon:message="Only xsd:schema element is allowed!"/>
        <assert test="if (xsd:schema and @href) then false() else true()"
                saxon:message="Grammar can't have both an href and a schema"/>
    </complexType>

    <!-- Simple Types -->
    <simpleType name="StepType">
        <restriction base="xsd:string">
            <enumeration value="START"/>
            <enumeration value="URL_FAIL"/>
            <enumeration value="METHOD_FAIL"/>
            <enumeration value="ACCEPT"/>
            <enumeration value="URL"/>
            <enumeration value="METHOD"/>
            <enumeration value="URLXSD"/>
            <enumeration value="REQ_TYPE"/>
            <enumeration value="REQ_TYPE_FAIL"/>
        </restriction>
    </simpleType>

    <simpleType name="GrammarType">
        <restriction base="xsd:string">
            <enumeration value="W3C_XML"/>
            <!-- Others to follow? -->
        </restriction>
    </simpleType>

    <simpleType name="QNameList">
        <list itemType="xsd:QName"/>
    </simpleType>
</schema>
